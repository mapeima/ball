import logging

from model.DBConnection import DBCOnnection


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)

connection = DBCOnnection()


def get_user_by_id(user_id):
    """Returns the user from the database

    Args:
        user_id (str): The user id to identify it

    Returns:
        dict: The user id, username, salt, hash and join datetime
    """
    query = "SELECT * FROM users WHERE id = '{}'".format(user_id)

    try:
        return connection.execute(query)[0]

    except Exception as e:
        logger.error(e)

        raise e


def get_user_by_username(username):
    """Returns the user from the database

    Args:
        username (str): The unique username of the user

    Returns:
        dict: The user id, username, salt, hash and join datetime
    """
    query = "SELECT * FROM users WHERE username = '{}'".format(username)

    try:
        return connection.execute(query)[0]

    except Exception as e:
        logger.error(e)

        raise e


def get_salt_hash_by_username(username):
    """Returns the salt and the hash of a user from the database.

    Args:
        username (str): The unique username of the user.

    Returns:
        tuple: a pair salt, hash of the user identified by the username.
    """
    query = "SELECT salt, hash FROM users WHERE username = '{}'".format(username)

    try:
        salt_hash = connection.execute(query)[0]

        return tuple(salt_hash.values())

    except Exception as e:
        logger.error(e)

        raise e


def insert_user(username, salt, final_hash):
    """Inserts a user in the database.

    Args:
        username (str): The unique username of the user.
        salt (bytes): A salt generated automatically.
        final_hash (bytes): The final hash generated by prepend the salt to the password and hash it.
    """
    stmt = "INSERT INTO users(username, salt, hash) VALUES('{}', %s, %s)".format(username)

    try:
        connection.execute(stmt, salt, final_hash)

    except Exception as e:
        logger.error(e)

        raise e
